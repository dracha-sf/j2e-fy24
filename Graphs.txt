//problem 1

import java.util.*;
class solution
{static class AdjListNode {
    int v;
    int weight;
  AdjListNode(int _v, int _w)
    {
      v = _v;
      weight = _w;
    }
    int getV() { return v; }
    int getWeight() { return weight; }
  }
 static class Graph {
    int V; 
ArrayList<ArrayList<AdjListNode>> adj;
    Graph(int V) 
    {
      this.V = V;
      adj = new ArrayList<ArrayList<AdjListNode>>(V);

      for(int i = 0; i < V; i++){
        adj.add(new ArrayList<AdjListNode>());
      }
    }

    void addEdge(int u, int v, int weight)
    {
      AdjListNode node = new AdjListNode(v, weight);
      adj.get(u).add(node); 
    }
  void topologicalSortUtil(int v, boolean visited[],
                             Stack<Integer> stack)
    {visited[v] = true;
  for (int i = 0; i<adj.get(v).size(); i++) {
        AdjListNode node = adj.get(v).get(i);
        if (!visited[node.getV()])
          topologicalSortUtil(node.getV(), visited, stack);
      }
stack.push(v);
    }
void longestPath(int s)
    {
      Stack<Integer> stack = new Stack<Integer>();
      int dist[] = new int[V];
for (int i = 0; i < V; i++)
        visited[i] = false;
 for (int i = 0; i < V; i++)
        if (visited[i] == false)
          topologicalSortUtil(i, visited, stack);
for (int i = 0; i < V; i++)
        dist[i] = Integer.MIN_VALUE;

      dist[s] = 0;

      while (stack.isEmpty() == false)
      {


        int u = stack.peek();
        stack.pop();

        if (dist[u] != Integer.MIN_VALUE)
        {
          for (int i = 0; i<adj.get(u).size(); i++)
          {
            AdjListNode node = adj.get(u).get(i);
            if (dist[node.getV()] < dist[u] + node.getWeight())
              dist[node.getV()] = dist[u] + node.getWeight();
          }
        }
      }


      for (int i = 0; i < V; i++)
        if(dist[i] == Integer.MIN_VALUE)
          System.out.print("INF ");
      else
        System.out.print(dist[i] + " ");
    }
  }




Problem 2:


import java.util.*;
import java.util.ArrayList;
import javafx.util.Pair;

class solution {
    public static int minSwaps(int[] arr)
    {
        int n = arr.length;
        ArrayList<Pair<Integer, Integer> > arrpos
            = new ArrayList<Pair<Integer, Integer> >();
        for (int i = 0; i < n; i++)
            arrpos.add(
                new Pair<Integer, Integer>(arr[i], i));
        arrpos.sort(
            new Comparator<Pair<Integer, Integer> >() {
                public int compare(
                    Pair<Integer, Integer> o1,
                    Pair<Integer, Integer> o2)
                {
                    if (o1.getKey() > o2.getKey())
                        return -1;
                    else if (o1.getKey().equals(
                                 o2.getKey()))
                        return 0;

                    else
                        return 1;
                }
            });
        Boolean[] vis = new Boolean[n];
        Arrays.fill(vis, false);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (vis[i] || arrpos.get(i).getValue() == i)
                continue;
            int cycle_size = 0;
            int j = i;
            while (!vis[j]) {
                vis[j] = true;
                j = arrpos.get(j).getValue();
                cycle_size++;
            }
            if (cycle_size > 0) {
                ans += (cycle_size - 1);
            }
        } return ans;
    }
}


Problem 3:



import java.util.*;

class GFG{
 static class Node
{
    int key;
    ArrayList<Node> adj = new ArrayList<Node>();

    Node(int key)
    {
        this.key = key;
    }
}
static void printGraph(Node startNode,
                       boolean[] visited)
{
    if (!startNode.adj.isEmpty())
    {
        for(Node i : startNode.adj)
        {
            if (!visited[startNode.key])
            {
                System.out.println("edge " + startNode +
                             "-" + i + ":" + startNode.key +
                             "-" + i.key);

                if (!visited[i.key])
                {
                    printGraph(i, visited);
                    visited[i.key] = true;
                }
            }
        }
    }
}
static Node cloneGraph(Node oldSource,
                       Node newSource,
                       boolean[] visited)
{
    Node clone = null;

    if (!visited[oldSource.key] &&
        !oldSource.adj.isEmpty())
    {
        for(Node old : oldSource.adj)
        {
            if (clone == null ||
               (clone != null &&
                clone.key != old.key))
                clone = new Node(old.key);

            newSource.adj.add(clone);
            cloneGraph(old, clone, visited);
            visited[old.key] = true;
        }
    }
    return newSource;
}




Problem 4:



class Solution {
    public int numIslands(char[][] grid) {
        int count=0;
       for(int i=0;i<grid.length;i++)
       {
           for(int j=0;j<grid[0].length;j++)
           {
               if(grid[i][j]=='1')
               {
                   count++;
                   func(grid,i,j);




               }
           }
       }
       return count; 
    }
    public void func(char[][] grid,int i,int j)




    {
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length ||grid[i][j]=='0' ||grid[i][j]=='2')
        {
            return;
        }
        grid[i][j]='2';
        func(grid,i+1,j);
        func(grid,i-1,j);
        func(grid,i,j+1);
        func(grid,i,j-1);
    }
}


Problem 5:


 class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        Map<Integer, Integer> map = new TreeMap<>();




        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                map.put(matrix[i][j], map.getOrDefault(matrix[i][j], 0) + 1);
            }
        }




        for(int n : map.keySet()) {
            k -= map.get(n);




            if(k <= 0) {
                return n;
            }
        }




        return -1;
    }
}











Problem 6:



class Solution {
    public int uniquePaths(int m, int n)
    {
        int arr[][]=new int[m][n];
        int dp[][]=new int[m][n];
        return func(arr,0,0,m,n,dp); 
    }
    public int func(int[][] arr,int i,int j,int m,int n,int[][] dp)
    {
        if(i==m-1 && j==n-1)
        {
           return 1;
        }
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=0) return dp[i][j];

             int down= func(arr,i+1,j,m,n,dp);


         int right=func(arr,i,j+1,m,n,dp);
         return dp[i][j]=down +right;



    }




}




Problem 7:


 


class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if(edges.length == 0 || n == 1){
            List<Integer> res = Arrays.asList(0);
            return res;
        }
        ArrayList<Integer>[] adj = new ArrayList[n];
        int[] indegree = new int[n];

        for(int i=0; i<n; i++){
            adj[i] = new ArrayList<>();
        }

        for(int[] e: edges){
            int v = e[0];
            int u = e[1];

            adj[v].add(u);
            adj[u].add(v);
            indegree[u]++;
            indegree[v]++;
        }

        ArrayDeque<Integer> queue = new ArrayDeque<>();

        for(int i=0; i<n; ++i){
            if(indegree[i] == 1){
                queue.add(i);
            }
        }

        while(n > 2){
            int size = queue.size();
            n -= size;

            while(size-- > 0){
                //remove
                int rem = queue.remove();

                //mark*
                //work
                for(int i: adj[rem]){
                    indegree[i]--;
                    if(indegree[i] == 1){
                        queue.add(i);
                    }
                }
                //add*
            }
        }

        ArrayList<Integer> res = new ArrayList<>();
        while(queue.size()>0){
            res.add(queue.pop());
        }


        return res;
    }
}




Problem 8:


 
class Node {

    int data;
    Node left, right;

    public Node(int item)
    {
        data = item;
        left = right = null;
    }
}
class Res {
    public int val;
}
class BinaryTree {
    Node root;
    int findMaxUtil(Node node, Res res)
    {
        if (node == null)
            return 0;
        int l = findMaxUtil(node.left, res);
        int r = findMaxUtil(node.right, res);
        int max_single = Math.max(
            Math.max(l, r) + node.data, node.data);
        int max_top
            = Math.max(max_single, l + r + node.data);
        res.val = Math.max(res.val, max_top);

        return max_single;
    }

    int findMaxSum() { return findMaxSum(root); }


Problem 9:


 

import java.util.*;

class solution{
static final int MAXN = 1000005;
static Vector<Integer> []v = new Vector[MAXN];
static {
    for (int i = 0; i < v.length; i++)
        v[i] = new Vector<Integer>();
}
static void add_edge(int a, int b, int fre[])
{
    v[a].add(b);
    fre[b]++;
}
static Vector<Integer> topological_sorting(int fre[], int n)
{
    Queue<Integer> q = new LinkedList<Integer>();
    for (int i = 0; i < n; i++)
        if (fre[i]==0)
            q.add(i);

    Vector<Integer> l = new Vector<Integer>();
    while (!q.isEmpty()) {
        int u = q.peek();
        q.remove();
        l.add(u);
        for (int i = 0; i < v[u].size(); i++) {
            fre[v[u].get(i)]--;
            if (fre[v[u].get(i)]==0)
                q.add(v[u].get(i));
        }
    }
    return l;
}
static int numberofPaths(int source, int destination, int n, int fre[])
{
    Vector<Integer> s = topological_sorting(fre, n);
    int dp[] = new int[n];
    dp[destination] = 1;
    for (int i = s.size() - 1; i >= 0; i--) {
        for (int j = 0; j < v[s.get(i)].size(); j++) {
            dp[s.get(i)] += dp[v[s.get(i)].get(j)];
        }
    }

    return dp;
}
Problem 10:


 

import java.util.*;
class Graph {
    private int V; 

    private LinkedList<Integer>[] adj;



    ArrayList<ArrayList<Integer> > components
        = new ArrayList<>();

    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];

        for (int i = 0; i < v; i++)
            adj[i] = new LinkedList();
    }

    void addEdge(int u, int w)
    {
        adj[u].add(w);
        adj[w].add(u); 
    }
void DFSUtil(int v, boolean[] visited,
                 ArrayList<Integer> al)
    {
        visited[v] = true;
        al.add(v);
        System.out.print(v + " ");
        Iterator<Integer> it = adj[v].iterator();

        while (it.hasNext()) {
            int n = it.next();
            if (!visited[n])
                DFSUtil(n, visited, al);
        }
    }

    void DFS()
    {
        boolean[] visited = new boolean[V];

        for (int i = 0; i < V; i++) {
            ArrayList<Integer> al = new ArrayList<>();
            if (!visited[i]) {
                DFSUtil(i, visited, al);
                components.add(al);
            }
        }
    }
int ConnectedComponents() { return components.size(); }
}


Problem 11:


  


class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        int ans=0;
        int max=0;
        int dp[][]=new int[m][n];

            for(int[] row:dp)
            {
                Arrays.fill(row,-1);
            }

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                 ans=func(matrix,m,n,i,j,dp);
                 max=Math.max(ans,max);
            }
        }
        return max;
    }
    public static int func(int[][] arr,int m,int n,int i,int j,int[][] dp)
    {
        int up=0,down=0,left=0,right=0;
       if(i<0 || j<0 || i>=m || j>=n)
       {
           return 0;
       }
       if(dp[i][j]!=-1) return dp[i][j];
       if(j+1<n && arr[i][j]<arr[i][j+1])
       {
          right=  func(arr,m,n,i,j+1,dp);
       }
       if(j-1>=0 && arr[i][j]<arr[i][j-1])
       {
          left=func(arr,m,n,i,j-1,dp);
       }
       if(i-1>=0 && arr[i][j]<arr[i-1][j])
       {
            up=func(arr,m,n,i-1,j,dp);
       }
       if(i+1<m && arr[i][j]<arr[i+1][j])
       {
          down=  func(arr,m,n,i+1,j,dp);
       }
       return dp[i][j]=1+Math.max(Math.max(up,down),Math.max(right,left));
    }
}






Problem 12:


  import java.io.*;
import java.util.*;

class solution {
    static int minJumps(int arr[], int l, int h)
    {
        if (h == l)
            return 0;
            return Integer.MAX_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i = l + 1; i <= h && i <= l + arr[l];
             i++) {
            int jumps = minJumps(arr, i, h);
            if (jumps != Integer.MAX_VALUE
                && jumps + 1 < min)
                min = jumps + 1;
        }
        return min;
    }






Problem 13:
 class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String,List<String>> hm=new HashMap<>();
        for(List<String> i:tickets)
        {
            List<String> a=i;
            if(!hm.containsKey(a.get(0)))
            {
                List<String> al=new ArrayList<>();
                al.add(a.get(1));
                Collections.sort(al);
                hm.put(a.get(0),al);
            }
            else
            {
               List<String> ab=hm.get((a.get(0)));
               hm.remove(a.get(0));
               ab.add(a.get(1));
               Collections.sort(ab);
               hm.put(a.get(0),ab);  
            }
        }
        System.out.println(hm);

        Stack<String> st=new Stack<>();
        st.push("JFK");//fixing first element as "JFK"
        List<String> ans=new ArrayList<>();

        while(st.size()!=0)
        {
          String w=st.peek(); 
        if(hm.containsKey(w))
        { 

         List<String> al=hm.get(w);

        if(al.size()>0)  
        {
            st.push(al.get(0));
            al.remove(0);
        }
        else 
        {

            hm.remove(w);
            ans.add(st.pop());
        }
        }
        else
        {
            ans.add(st.pop());
        }
        }
        System.out.println(ans);
        Collections.reverse(ans);
        return ans;


    }
}



Problem 15:

 
public class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) != '0' ? 1 : 0;
        for (int i = 2; i <= n; i++) {
            int first = Integer.valueOf(s.substring(i - 1, i));
            int second = Integer.valueOf(s.substring(i - 2, i));
            if (first >= 1 && first <= 9) {
               dp[i] += dp[i-1];  
            }
            if (second >= 10 && second <= 26) {
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
}