Problem 2:
Find the number of unique paths in a n X m grid, starting from [0,0] to [n-1,m-1], where movement is only allowed
either 1 cell down or 1 cell right at a time.

SOLUTION:
public class UniquePaths {
    public static int uniquePaths(int n, int m) {
        int[][] dp = new int[n][m];

for (int i = 0; i < m; i++) {
            dp[0][i] = 1;
        }

        
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }

       
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        return dp[n - 1][m - 1];
    }

    public static void main(String[] args) {
        int n = 3;
        int m = 4;
        int paths = uniquePaths(n, m);
        System.out.println("Number of unique paths: " + paths);
    }
}