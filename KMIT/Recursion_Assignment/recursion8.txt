public class Solution{
	public static boolean isPalindrome(String s, int index, int i) {
		while (index <= i) {
			if (s.charAt(index) != s.charAt(i)) {
				return false;
			}
			index++;
			i--;
		}
		return true;
	}
	public static void helper(List<List<String>> result, List<String>l, String s, int n, int index) {
	if (index == n) {
		result.add(new ArrayList<>(l));
		return;
	}
	for (int i = index; i < n; i++) {
		if (isPalindrome(s, index, i)) {
			l.add(s.substring(index, i + 1));
			helper(result, l, s, n, i + 1);
			l.remove(l.size() - 1);
		}
	}
	}

	public static List<List<String>> allPalindromePartitions(String s) {
		List<List<String>> result = new ArrayList<>();
		List<String>l = new ArrayList<>();
		int n = s.length();
		helper(result, l, s, n, 0);
		return result;
	}

	public static void main(String[] args) {
		String s = sc.next();
		List<List<String>> result = allPalindromePartitions(s);
		System.out.println(result);
	}
}
