class Solution{
	public static void topologicalSortUtil(int v, boolean visited[], Stack<Integer> stack){
		visited[v] = true;
		for (int i = 0; i<adj.get(v).size(); i++) {
			AdjListNode node = adj.get(v).get(i);
			if (!visited[node.getV()]){
		     	     topologicalSortUtil(node.getV(), visited, stack);
			}
		}
		stack.push(v);
	}

	public static void longestPath(int s){
		Stack<Integer> stack = new Stack<Integer>();
		int dist[] = new int[V];
		boolean visited[] = new boolean[V];
		for (int i = 0; i < V; i++)
		     visited[i] = false;
		for (int i = 0; i < V; i++){
		     if (visited[i] == false){
			topologicalSortUtil(i, visited, stack);
		     }
		}

		for (int i = 0; i < V; i++)
			dist[i] = Integer.MIN_VALUE;
		dist[s] = 0;
	
		while (stack.isEmpty() == false){
			int u = stack.peek();
			stack.pop();
			if (dist[u] != Integer.MIN_VALUE){
		 	    for (int i = 0; i<adj.get(u).size(); i++){
				AdjListNode node = adj.get(u).get(i);
				if (dist[node.getV()] < dist[u] + node.getWeight()){
					dist[node.getV()] = dist[u] + node.getWeight();
				}
			    }
			}
		}

		for (int i = 0; i < V; i++){
			if(dist[i] == Integer.MIN_VALUE)
				System.out.print("INF ");
			else
				System.out.print(dist[i] + " ");
		}
	}
}