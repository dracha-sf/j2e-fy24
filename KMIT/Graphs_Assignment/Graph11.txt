class Solution {
    private int[][] memo;
    private int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;

        int rows = matrix.length;
        int cols = matrix[0].length;
        int longestPath = 0;
        memo = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int pathLength = dfs(matrix, i, j);
                longestPath = Math.max(longestPath, pathLength);
            }
        }

        return longestPath;
    }

    private int dfs(int[][] matrix, int row, int col) {
        if (memo[row][col] != 0)
            return memo[row][col];

        int maxLength = 1; // Minimum path length is 1 (the current cell itself)

        for (int[] dir : directions) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];

            if (newRow >= 0 && newRow < matrix.length &&
                    newCol >= 0 && newCol < matrix[0].length &&
                    matrix[newRow][newCol] > matrix[row][col]) {
                int length = 1 + dfs(matrix, newRow, newCol);
                maxLength = Math.max(maxLength, length);
            }
        }

        memo[row][col] = maxLength;
        return maxLength;
    }
}
