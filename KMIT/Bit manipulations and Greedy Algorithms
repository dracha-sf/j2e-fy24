Array assignment questions
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.
Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.
Note that multiple kids can have the greatest number of candies.
 
Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
Example 2:
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int max=candies[0];
        List<Boolean> al=new ArrayList<>();
        for(int i=1;i<candies.length;i++)
        {
            if(candies[i]>max)
            {
                max=candies[i];
            }
        }
        for(int i=0;i<candies.length;i++)
        {
            if(candies[i]+extraCandies>=max)
            {
                al.add(true);
            }
            else
            {
                al.add(false);
            }
        }
        return al;
    }
}

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.
 
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

class Solution {
    public int maxArea(int[] arr) {
        int max=Integer.MIN_VALUE;
    
      int i=0;
      int j=arr.length-1;
      while(i!=j)
      {
          if(Math.min(arr[i],arr[j])*Math.abs(i-j)>max)
          {
              max=Math.min(arr[i],arr[j])*Math.abs(i-j);
          }
          if(arr[i]<arr[j]) i++;
          else j--;
      }
      return max; 
    }
}

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.
 
Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:
Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
class Solution {
    public int threeSumClosest(int[] arr, int t) {
        class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int min = Integer.MAX_VALUE;
        int result = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) 
        {
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) 
            {
                int sum = nums[i] + nums[j] + nums[k];
                int diff = Math.abs(sum - target);
                if(diff == 0) 
                    return sum;
                if (diff < min) 
                {
                    min = diff;
                    result = sum;
                }
                if (sum <= target) 
                {
                    j++;
                }
                else 
                {
                    k--;
                }
            }
        }
        return result;
    }
}
        
        
    }
}

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
•	For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
•	For example, the next permutation of arr = [1,2,3] is [1,3,2].
•	Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
•	While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.
 
Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

class Solution {
    public void nextPermutation(int[] arr) {
        int i=arr.length-2;
        int flag=0;
        while(i>=0)
        {
            if(arr[i]<arr[i+1])
            {
                int j=arr.length-1;
                while(j>i)
                {
                    if(arr[j]>arr[i])
                    {
                        swap(arr,i,j);
                        flag=1;
                        break;
                    }
                    else
                    {
                    j--;}
                }
                 if(flag==1) break;
            }
            else
            {
            i--;
            }
           // if(flag==1) break;
        }
        reverse(arr,i+1,arr.length-1);

        
    }
    public void swap(int[] arr,int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public void reverse(int[] arr,int start,int end)
    {
        while(start<end) swap(arr,start++,end--);
    }
    
}

There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.
 
Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:
Input: nums = [1], target = 0
Output: -1

class Solution {
    public int search(int[] arr, int target) {
        int i=0;
        int j=arr.length-1;

        while(i<=j)
        {
            if(target==arr[i] )
            {
             return i;
            }
            else if(target==arr[j] )
            {
             return j;
            }
         else   if(arr[i]+arr[j]>target)
            {
                j--;
            }
          else  if(arr[i]+arr[j]<target)
            {
                i++;
            }
            else if(arr[i]+arr[j]==target)
            {
                i++;
                j--;
            }
            
        
        }
        return -1;
    }
}

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> s=new HashSet<>();
        boolean[] vis=new boolean[nums.length];
        perum(nums,s,new ArrayList<>(),vis) ;
        List<List<Integer>> ans=new ArrayList<>();
        for(List<Integer> i:s) ans.add(i);
        return ans;
    }
    public void perum(int[] arr, Set<List<Integer>> s,List<Integer> ds, boolean[] vis)
    {
        if(ds.size()==arr.length)
        {
            s.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<arr.length;i++)
        {
            if(vis[i]!=true)
            {
                ds.add(arr[i]);
                vis[i]=true;
                perum(arr,s,ds,vis);
                ds.remove(ds.size()-1);
                vis[i]=false;
                
            }
        }
    }
}

Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.
 
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

class Solution {
    public int maxSubArray(int[] nums) {
       int cursum=0;
       int maxsum=Integer.MIN_VALUE;
     //  if(nums.length==1) return nums[0];
       for(int i=0;i<nums.length;i++)
       {
           cursum=cursum+nums[i];
            maxsum=Math.max(cursum,maxsum);
           if(cursum<0) cursum=0;
          
       } 
       return maxsum;
    }
}

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
 
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
 
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

class Solution {
    public void sortColors(int[] arr) {
        int c1=0;
        int c0=0;
        int c2=0;
      for(int i=0;i<arr.length;i++)
      {
         if(arr[i]==0)
         {
             c0++;
         }
         if(arr[i]==1)
         {
             c1++;
         }
         if(arr[i]==2)
         {
             c2++;
         }
      }
      for(int i=0;i<arr.length;i++)
      {
          if(c0>0)
          {
              arr[i]=0;
              c0--;
          }
          else if(c1>0)
          {
              arr[i]=1;
              c1--;
          }
          else
          {
              arr[i]=2;
          }
      }  
    }
}

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
 
Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

class Solution {
    public int maxProfit(int[] arr) {
        int pro=0;
        int buy=arr[0];
        for(int i=1;i<arr.length;i++)
        {
           pro=Math.max(pro,arr[i]-buy);
           if(arr[i]<buy)
           {
                buy=arr[i];
           } 
        }
        return pro;
      
    }
}

A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.
 
Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

class Solution {
    public int findPeakElement(int[] arr) {
        int l=0;
        int h=arr.length-1;
        while(l<h)
        {
            int mid=(l+h)/2;
            if(arr[mid]<arr[mid+1])
            {
                l=mid+1;
            }
            else
            {
                h=mid;
            }
        }
       return l;
    }
}

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n).
 
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}   
    }

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.
 
class Solution {
    public int maxArea(int[] arr) {
        int max=Integer.MIN_VALUE;
    
      int i=0;
      int j=arr.length-1;
      while(i!=j)
      {
          if(Math.min(arr[i],arr[j])*Math.abs(i-j)>max)
          {
              max=Math.min(arr[i],arr[j])*Math.abs(i-j);
          }
          if(arr[i]<arr[j]) i++;
          else j--;
      }
      return max; 
    }
}

Given a binary array nums, return the maximum number of consecutive 1's in the array.
 
Example 1:
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 2

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        int ct=0;
        int ans=0;
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
            if(arr[i]==1)
            {
                ct++;
            }
            else
            {
                System.out.println(ct);
                ans=Math.max(ans,ct);
                ct=0;
            }
        }
        ans=Math.max(ans,ct);
        return ans;
    }
}

Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
You must solve it in O(n) time complexity.
 
Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> q=new PriorityQueue<>(Collections.reverseOrder());
        for(int i:nums)
        {
            q.add(i);
        }
        while(k>1)
        {
            q.poll();
            k--;
        }
        return q.poll();

    }
}

