1 QUESTION:
Given the head of a linked list, remove the nth node from the end of the list and return its head.
SOLUTION:
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode t1=head;
        ListNode t2=head;
        int c=0;
        if(head.next==null)return null;
        int f=0;
        while(c<n && t1.next!=null){            
            t1=t1.next;           
            c++;
        }
        if(t1.next==null && c<n)f=1;
        while(t1.next!=null){
            t1=t1.next;
            t2=t2.next;
        }
        if(f==1){
            head=head.next;
            return head;
        }
        if(t2.next!=null )t2.next=t2.next.next;
        else t2.next=null;
        return head;
    }
}


2 QUESTION:
 You are given the heads of two sorted linked lists list1 and list2.Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.Return the head of the merged linked list.
SOLUTION:
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode t1=list1;
        ListNode t2=list2;
        if(t1==null && t2==null)return null;
        if(t1==null )return t2;
        if(t2==null)return t1;
        else{
            if(t1.val<=t2.val) {
                t1.next=mergeTwoLists(t1.next,t2);
                return t1;
            }
            else{
                t2.next=mergeTwoLists(t1,t2.next);
                return t2;
            }
        }
    }
}




3 QUESTION:
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
SOLUTION:
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode temp1=head;
        ListNode temp2=head.next;
        while(temp1!=null && temp2!=null){
            int t=temp2.val;
            temp2.val=temp1.val;
            temp1.val=t;
            if(temp2.next!=null){
                temp1=temp2.next;
            }
            else{
                return head;
            }
            if(temp1.next!=null){
                temp2=temp1.next;
            }
            else{
                return head;
            }
            
        }
        return head;
    }
}


4 QUESTION:
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
SOLUTION:
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode t=head;
        while(t!=null && t.next!=null){
            if(t.val<t.next.val)t=t.next;
            else if(t.val==t.next.val)t.next=t.next.next;
        }
        return head;
    }
}



5 QUESTION:
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.
SOLUTION:
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode t1=new ListNode();
        t1.next=head;
        ListNode t2=t1;
        if(head==null)return null;
        else{
            while(t2.next!=null && t2.next.next!=null){
                if(t2.next.val==t2.next.next.val){
                    int b=t2.next.val;
                    while(t2.next!=null && t2.next.val==b){
                        t2.next=t2.next.next;
                    }
                }
                else t2=t2.next;
            }
            return t1.next;
        }
    }
}



6 QUESTION:
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
Implement the LRUCache class:
**LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
**int get(int key) Return the value of the key if the key exists, otherwise return -1.
**void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.
SOLUTION:
class LRUCache {
 Node head = new Node(0,0);
     Node tail = new Node(0,0);
     HashMap<Integer,Node> map = new HashMap<>();
     int capacity;
    public LRUCache(int _capacity) {
        capacity = _capacity;
        head.next = tail;
        tail.prev = head;
       
    }
    
    public int get(int key) {
         if(map.containsKey(key)){
            Node node  = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }
        else return -1;
    }
     private void remove(Node node){
         map.remove(node.key);
         node.prev.next = node.next;
         node.next.prev = node.prev;
     }
     private void insert(Node node){
         map.put(node.key,node);
        Node headNext = head.next;
        head.next = node;
        node.prev = head;
        node.next = headNext;
        headNext.prev = node;


     }
    public void put(int key, int value) {
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(map.size() == capacity){
            remove(tail.prev);


        }
        insert(new Node(key,value));
    }
}
 class Node{
        Node prev,next;
        int key,value;
        Node(int _key,int _val){
            key = _key;
            value = _val;
        }
    }




7 QUESTION:
Design your implementation of the circular double-ended queue (deque).
Implement the MyCircularDeque class:


SOLUTION:
class MyCircularDeque {
    int[] arr;
    int count=0,size=0,front=-1,rear=-1;
    public MyCircularDeque(int k) {
        arr=new int[k];
        size=k;
    }
    
    public boolean insertFront(int value) {
        if(isFull()) return false;
        
        if(front==-1 && rear==-1){ //if we want to add at first index
            front=rear=0;
            arr[front]=value;
        }else if(front==0){ //if we add front of index 0 we need to point last index just like circle
            front=size-1;   
            arr[front]=value;
        }else{ //if not index 0 
            front--;
            arr[front]=value;
        }
        count++;    //counting
        return true;
        
    }
    
    public boolean insertLast(int value) {
        if(isFull()) return false;
        
        if(front==-1 && rear==-1){  //if we need to add first element
            front=rear=0;
            arr[rear]=value;
        }else if(rear==size-1){ //if rear at last index reset rear
            rear=0;
            arr[rear]=value;
        }else{  //if rear not at last index
            rear++;
            arr[rear]=value;
        }
        count++;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty()) return false;
        
        if (front == rear) {    //if rear==front that means that is only one element in arr
            front = rear = -1;
        } else if (front == size - 1) { //if front at last index
            front = 0;
        } else {
            front++;
        }
        count--;
        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty()) return false;
        
        if (front == rear) {    
            front = rear = -1;
        } else if (rear == 0) { 
            rear = size-1;
        } else {
            rear--;
        }
        count--;
        return true;
    }
    
    public int getFront() {
        return isEmpty()?-1:arr[front];
    }
    
    public int getRear() {
        return isEmpty()?-1:arr[rear];
    }
    
    public boolean isEmpty() {
        return count==0;
    }
    
    public boolean isFull() {
        return size==count;
    }
}



8 QUESTION:
You are given two linked lists: list1 and list2 of sizes n and m respectively.
Remove list1's nodes from the a th node to the b th node, and put list2 in their place.
SOLUTION:
class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        ListNode  t1=list1;
        ListNode t2=list2;
        int c=1;
        while(c<a){
            t1=t1.next;
            c++;
        }
        ListNode t3=t1;
        while(c<=b){
            t1=t1.next;
            c++;
        }
        
        t3.next=list2;
        while(t3.next!=null){
            t3=t3.next;
        }
        t3.next=t1.next;
        return list1;
    }
    
}
