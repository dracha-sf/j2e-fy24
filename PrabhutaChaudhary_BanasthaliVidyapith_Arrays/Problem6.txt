class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int> temp;
        vector<vector<int>> result;
        vector<bool> used(nums.size(),false);

        backtrack(nums,temp,result,used);

        return result;
    }
    private:
    void backtrack(const vector<int>& nums,vector<int>& temp, vector<vector<int>>& result, vector<bool>& used)
    {
        if(temp.size()==nums.size())
        {
            result.push_back(temp);
            return;
        }

        for(int i=0;i<nums.size();i++)
        {
            if(used[i] || i>0 && nums[i]==nums[i-1] && !used[i-1])
            {
                continue;
            }

            used[i]=true;
            temp.push_back(nums[i]);

            backtrack(nums,temp,result,used);

            used[i]=false;
            temp.pop_back();
        }
    }
};