Stacks and Queue Assignment

PROBLEM-1

import java.util.LinkedList;
import java.util.Queue;
class Problem1 {
    static Queue<Integer> q1;
    static Queue<Integer> q2;

    public Problem1() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }

    public static void push(int value) {
        if (q1.isEmpty()) {
            q1.add(value);
            while (!q2.isEmpty()) {
                q1.add(q2.remove());
            }
        } else {
            q2.add(value);
            while (!q1.isEmpty()) {
                q2.add(q1.remove());
            }
        }
    }

    public static int pop() {
       if (!q1.isEmpty()) {
            return q1.remove();
        } else if (!q2.isEmpty()) {
            return q2.remove();
        } 
        return -1;
    }

    public static int  top() {
        if (!q1.isEmpty()) {
            return q1.peek();
        } else if (!q2.isEmpty()) {
            return q2.peek();
        } 
        return -1;
    }

    public static boolean isEmpty() {
        return q1.isEmpty() && q2.isEmpty();
    }
    public static void main(String[] args) {
        Problem1 stack = new Problem1();
        stack.push(10);
        stack.push(27);
        stack.push(300);

        System.out.println(stack.pop());  
        System.out.println(stack.top());  
        System.out.println(stack.isEmpty());  
        System.out.println(stack.pop()); 
        System.out.println(stack.pop()); 


    }
}

PROBLEM-2


import java.util.*;
class Problem2
{
static class Queue
{
	static Stack<Integer> s1 = new Stack<Integer>();
	static Stack<Integer> s2 = new Stack<Integer>();

	static void enQueue(int x)
	{
		while (!s1.isEmpty())
		{
			s2.push(s1.pop());
		}
        s1.push(x);
        while (!s2.isEmpty())
		{
			s1.push(s2.pop());
		}
	}
	static int deQueue()
	{
		if (s1.isEmpty())
		{
			System.out.println("Q is Empty");
			System.exit(0);
		}
		int x = s1.peek();
		s1.pop();
		return x;
	}
};
public static void main(String[] args)
{
	Queue q = new Queue();
	q.enQueue(17);
	q.enQueue(24);
	q.enQueue(39);

	System.out.println(q.deQueue());
	System.out.println(q.deQueue());
}
}


PROBLEM-3


import java.util.*;
class Problem3 {
    public static List<Integer> findMaximums(int[] arr, int k) {
        List<Integer> maximums = new ArrayList<>();
        Deque<Integer> deque = new LinkedList<>();
        for (int i = 0; i < k; i++) {
            while (!deque.isEmpty() && arr[i] >= arr[deque.peekLast()]) {
                deque.removeLast();
            }
            deque.addLast(i);
        }

        for (int i = k; i < arr.length; i++) {
            maximums.add(arr[deque.peekFirst()]);
            while (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.removeFirst();
            }
            while (!deque.isEmpty() && arr[i] >= arr[deque.peekLast()]) {
                deque.removeLast();
            }

            deque.addLast(i);
        }
        maximums.add(arr[deque.peekFirst()]);

        return maximums;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2,3,1,4,5,2,3,6};
        int k = 3;

        List<Integer> maximums = findMaximums(arr, k);
        System.out.println( maximums);
    }
}



PROBLEM-4

import java.util.*;
class Problem4
{
    static Node head;
    static Node tail;
    static Map<Integer, Node> map = new HashMap<>();
    static int capacity;

    Problem4(int cap)
    {

        head = new Node(0,0);
        tail = new Node(0,0);
        map = new HashMap<>();
        capacity=cap;
        head.next=tail;
        tail.prev=head;
    }


    public static int get(int key)
    {

        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }
        else{
            return -1;
        }
    }


    public static void set(int key, int value)
    {

        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(capacity==map.size()){
            remove(tail.prev);
        }
        insert(new Node(key,value));
    }

    private static void remove(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }

    private static void insert(Node node){
        map.put(node.key, node);
        Node headNext = head.next;
        head.next = node;
        node.prev=head;
        headNext.prev=node;
        node.next=headNext;
    }

    public static void main(String[] args) {

    }
}

class Node{
    Node prev;
    Node next;
    int key, value;
    Node(int key, int value){
        this.key=key;
        this.value=value;
    }
}



PROBLEM-5

import java.util.*;
public class Problem5 {
    ArrayList<Integer> rotation(int N)
    {

        ArrayList<Integer> res = new ArrayList<Integer>();
       int[] arr = new int[1001];
       Queue<Integer> q = new LinkedList<>();
       for(int i=1; i<=N; i++){
           q.add(i);
       }
       int i=1;
       while(!q.isEmpty()){
           int j=0;
           while(j<i){
               int x = q.peek();
               q.poll();
               q.add(x);
               j++;
           }
           int x = q.peek();
           if(arr[x] != 0){
               res.add(-1);
               return res;
           }
           arr[x] = i;
           q.poll();
           i++;
       }
       for(i=1; i<=N; i++)
           res.add(arr[i]);
       return res;
   }
   public static void main(String[] args) {

   }
}


PROBLEM-6

import java.util.*;

public class Problem6 {
    public static boolean isValid(String s) {

        HashMap<Character, Character> Hmap = new HashMap<Character, Character>();
        Hmap.put(')','(');
        Hmap.put('}','{');
        Hmap.put(']','[');

        Stack<Character> stack = new Stack<Character>();

        for (int idx = 0; idx < s.length(); idx++){

            if (s.charAt(idx) == '(' || s.charAt(idx) == '{' || s.charAt(idx) == '[') {
                stack.push(s.charAt(idx));
                continue;
            }

            if (stack.size() == 0 || Hmap.get(s.charAt(idx)) != stack.pop()) {
                return false;
            }
        }

        if (stack.size() == 0) {
            return true;
        }
        return false;
    }
    public static void main(String[] args) {
        System.out.println(isValid("()[]{}"));
    }
}


PROBLEM-7

import java.util.*;
public class Problem7 {
    public static long[] nextLargerElement(long[] arr, int n)
    { 

        long[] r=new long[n];
        r[n-1]=-1;
        Stack<Long>s=new Stack<>();
        s.push(arr[n-1]);
        for(int i=n-2;i>=0;i--){
            long v=arr[i];

        while(s.isEmpty()==false &&v>=s.peek())
        {

                s.pop();

        }
        if(s.isEmpty()==true){
            r[i]=-1;
        }
        else{
            r[i]=s.peek();
        }
        s.push(v);
        }
        return r;
    }
    public static void main(String[] args) {
        long[] arr = {4,5,2,25};
        int n = arr.length;
        System.out.println(Arrays.toString(nextLargerElement(arr,n)));
    }
}


PROBLEM-8

import java.util.*;
public class Problem8 {
    public static String removeDup(String s) {
        StringBuilder se=new StringBuilder();
        for(int i=0;i<s.length();i++)
        {
            if(se.length()>0 &&se.charAt(se.length()-1)== s.charAt(i))
            {
                se.deleteCharAt(se.length()-1);
            }
            else{
                se.append(s.charAt(i));
            }
        }
        return se.toString();

    }
    public static void main(String[] args) {
        System.out.println(removeDup("abbaca"));
    }
}


PROBLEM-9


import java.util.*;
public class Problem9 {
    List<Integer> list; int i;

    public Problem9() {
        list = new ArrayList<Integer>();
        i = 0;
    }

    public int next(int price) {
        list.add(i, price); 
        int j=i; int count = 0;
        while(list.get(j) <= price){
            if(j==0) {
                count++;
                break;
            }
            else{
                count++; 
                j--;
            }
        }
        i++;
        return count;
    }
    public static void main(String[] args) {
        Problem9 obj = new Problem9();
        System.out.println(obj.next(100));
        System.out.println(obj.next(80));
        System.out.println(obj.next(60));

    }
}



PROBLEM-10


import java.util.*;
public class Problem10 {
    public static int eval(String[] arr)
	{

		int i = 0;

		int lastNum = -1;
		while (i < arr.length) {

			if ("/*+-".contains(arr[i])) {

				int val1= Integer.valueOf(arr[lastNum - 1]);

				int val2 = Integer.valueOf(arr[lastNum]);

				int ans = 0;

				if (arr[i].equals("*"))
					ans = val1 * val2;
				else if (arr[i].equals("/"))
					ans = val1 / val2;
				else if (arr[i].equals("+"))
					ans = val1 + val2;
				else if (arr[i].equals("-"))
					ans = val1 - val2;

				arr[lastNum - 1] = Integer.toString(ans);

				lastNum--;
			}

			else {

				lastNum++;

				arr[lastNum] = arr[i];
			}
			i++; 
		}
		return Integer.valueOf(
			arr[lastNum]); 
	}
    public static void main(String[] args) {
        String[] arr = {"2","1","+","3","*"};
        System.out.println(eval(arr));

    }
}

