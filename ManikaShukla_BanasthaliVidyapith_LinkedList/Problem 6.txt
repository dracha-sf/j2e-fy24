Problem 6:
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
Implement the LRUCache class:
●LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
●int get(int key) Return the value of the key if the key exists, otherwise return -1.
●void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value
pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

CODE:
#include <unordered_map>
#include <list>
#include <iostream>
#include <vector>
class LRUCache {
private:
    int capacity;
    std::unordered_map<int, std::pair<int, std::list<int>::iterator>> cache;
    std::list<int> lruList;

public:
    LRUCache(int capacity) {
        this->capacity = capacity;
    }

    int get(int key) {
        if (cache.find(key) == cache.end()) {
            return -1; // Key does not exist in the cache
        }

        // Move the key to the front of the LRU list
        lruList.erase(cache[key].second);
        lruList.push_front(key);
        cache[key].second = lruList.begin();

        return cache[key].first;
    }

    void put(int key, int value) {
        if (cache.find(key) != cache.end()) {
            // Key exists, update the value and move it to the front of the LRU list
            lruList.erase(cache[key].second);
        }
        else if (cache.size() == capacity) {
            // Cache is full, evict the least recently used key
            int lruKey = lruList.back();
            lruList.pop_back();
            cache.erase(lruKey);
        }

        // Add the key-value pair to the cache and the front of the LRU list
        lruList.push_front(key);
        cache[key] = { value, lruList.begin() };
    }
};

int main() {
    std::vector<int> result;

    LRUCache cache(2);
    cache.put(1, 1);
    cache.put(2, 2);
    result.push_back(cache.get(1));
    cache.put(3, 3);
    result.push_back(cache.get(2));
    cache.put(4, 4);
    result.push_back(cache.get(1));
    result.push_back(cache.get(3));
    result.push_back(cache.get(4));

    // Print the results
    for (int value : result) {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}