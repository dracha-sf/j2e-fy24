PROBLEM-5

Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have
Node.val == 0.
Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.
A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Example 1:
Input: n = 3
Output: [[0,0,0]]

PROGRAM;

class Solution{
Map<Integer , List<TreeNode>> map = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int n) {

        if(!map.containsKey(n)){
            List<TreeNode> res = new ArrayList<>();

            if(n == 1){
                res.add(new TreeNode(0,null,null));
            } else {
                for(int i = 1 ; i < n ; i += 2){
                    List<TreeNode> leftSubtree = allPossibleFBT(i);
                    List<TreeNode> rightSubtree = allPossibleFBT(n - i - 1);

                    for(TreeNode left : leftSubtree){
                        for(TreeNode right : rightSubtree){
                            res.add(new TreeNode(0,left,right));
                        }
                    }
                }
            }
            map.put(n , res);
        }

        return map.get(n);
    }
}

