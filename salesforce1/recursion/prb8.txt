PROGRAM 8

Given a string s, partition s such that every string of the partition is a palindrome. Return all possible palindrome partitioning
of s.

Example 1:
Input: s = "bcc"
Output: [["b", "c", "c"], ["b", "cc"]]

Program:

import java.util.*;
public class p8 {
    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> t = new ArrayList<>();
        solve(0, s, res, t);
        return res;
    }

    public static void solve(int index, String s, List<List<String>> res, List<String> t) {
        if (index == s.length()) {
            res.add(new ArrayList<>(t));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                t.add(s.substring(index, i + 1));
                solve(i + 1, s, res, t);
                t.remove(t.size() - 1);
            }
        }
    }

    public static boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}