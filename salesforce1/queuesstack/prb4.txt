Problem - 4

DESIGN A DATA STRUCTURE THAT WORKS LIKE A LRU CACHE. HERE CAP DENOTES THE CAPACITY OF
THE CACHE AND Q DENOTES THE NUMBER OF QUERIES. QUERY CAN BE OF TWO TYPES:

1.SET x y: sets the value of the key x with value y
2.GET x: gets the key of x if present else returns -1.
The LRUCache class has two methods get() and set() which are defined as follows.

1.get(key): returns the value of the key if it already exists in the cache otherwise returns -1.
2.set(key, value): if the key is already present, update its value. If not present, add the key-value pair to the cache. If the
3.cache reaches its capacity it should invalidate the least recently used item before inserting the new item.
In the constructor of the class the capacity of the cache should be initialized.

Problem:

class LRUCache
{
    static Node head;
    static Node tail;
    static Map<Integer, Node> map = new HashMap<>();
    static int capacity;

    LRUCache(int cap)
    {

        head = new Node(0,0);
        tail = new Node(0,0);
        map = new HashMap<>();
        capacity=cap;
        head.next=tail;
        tail.prev=head;
    }


    public static int get(int key)
    {

        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }
        else{
            return -1;
        }
    }


    public static void set(int key, int value)
    {

        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(capacity==map.size()){
            remove(tail.prev);
        }
        insert(new Node(key,value));
    }

    private static void remove(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }

    private static void insert(Node node){
        map.put(node.key, node);
        Node headNext = head.next;
        head.next = node;
        node.prev=head;
        headNext.prev=node;
        node.next=headNext;
    }
}

class Node{
    Node prev;
    Node next;
    int key, value;
    Node(int key, int value){
        this.key=key;
        this.value=value;
    }
}