PROGRAM 6

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
[1,2,1],
[2,1,1]]

PROGRAM:

public class prb6 {
    public static List<List<Integer>> permute(int[] nums) {
        Set<List<Integer>> ans = new HashSet();
        helper(nums, 0, ans);
        return new ArrayList(ans);
    }

    public static void helper(int[] nums, int index, Set<List<Integer>> ans) {
        if (index == nums.length) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                list.add(nums[i]);
            }
            ans.add(list);
            return;
        }

        for (int i = index; i < nums.length; i++) {
            swap(i, index, nums);
            helper(nums, index + 1, ans);
            swap(i, index, nums);
        }
    }

    public static void swap(int i, int j, int[] nums) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
}

