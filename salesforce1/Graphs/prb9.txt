PROBLEM-9

Implement a function to find the number of paths in a directed acyclic graph (DAG) from the source node to the
destination node.

Example:
Input:
graph = [[0,1],[0,2],[1,2],[1,3],[2,3]]
source = 0, destination = 3
Output:
2

Program:

public class DAGPaths {
    public int countPaths(int[][] graph, int source, int destination) {
        int numNodes = graph.length;
        List<Integer>[] adjacencyList = new List[numNodes];


        for (int i = 0; i < numNodes; i++) {
            adjacencyList[i] = new ArrayList<>();
        }

        for (int[] edge : graph) {
            int u = edge[0];
            int v = edge[1];
            adjacencyList[u].add(v);
        }

        int[] pathCount = new int[numNodes];


        pathCount[destination] = 1;


        dfs(adjacencyList, source, pathCount);

        return pathCount[source];
    }

    private void dfs(List<Integer>[] adjacencyList, int node, int[] pathCount) {
        for (int neighbor : adjacencyList[node]) {

            pathCount[neighbor] += pathCount[node];
            dfs(adjacencyList, neighbor, pathCount);
        }
    }


}