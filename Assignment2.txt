Assignment 2

1.

import java.util.*;
public class Solution1 
{
    public static boolean backspaceCompare(String s1, String s2) 
    {
        return buildString(s1).equals(buildString(s2));
    }

    private static String buildString(String s) 
    {
        Stack<Character> stack = new Stack<>();

        for (char c : s.toCharArray()) 
        {
            if (c != '#') 
            {
                stack.push(c);
            } 
            else if (!stack.isEmpty()) 
            {
                stack.pop();
            }
        }

        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) 
        {
            sb.append(stack.pop());
        }

        return sb.reverse().toString();
    }
public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the string 1 ");
        String s1 = sc.next();
        System.out.println("Enter the string 2 ");
        String s2 = sc.next();

        boolean result = backspaceCompare(s1, s2);
        System.out.println(result ? 1 : 0);
    }
}


2.

import java.util.*;
public class Solution2 
{
   public static int findMinPackets(String str) 
    {
        int count = 0;
        for (int i = 1; i < str.length(); i++) 
        {
            if (str.charAt(i) != str.charAt(i - 1)) 
            {
                count++;
            }
        }
        return count + 1;
    }

    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter a string");
        String inputStr = sc.next();
        int minPackets = findMinPackets(inputStr);
        System.out.println(minPackets);
    }
}

3.

import java.util.*;
public class Solution3 
{
    public static int findMinMoves(String word) 
    {
        StringBuilder sb = new StringBuilder(word);
        int moves = 0;
        int i = 0;

        while (i < sb.length()) 
        {
            char currentChar = sb.charAt(i);
            int leftIndex = sb.lastIndexOf(Character.toString(currentChar), i - 1);
            int rightIndex = sb.indexOf(Character.toString(currentChar), i + 1);

            if (leftIndex != -1 && rightIndex != -1) 
            {
                sb.deleteCharAt(rightIndex);
                sb.deleteCharAt(leftIndex);
                sb.deleteCharAt(i-1);
                moves += 3;
                i = Math.max(i - 2, 0);
            } 
            else 
            {
                i++;
            }
        }

        return moves;
    }
 public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter a string");
        String word = sc.next();
        int minMoves = findMinMoves(word);
        System.out.println(minMoves);
    }
}

4.

import java.io.*;
import java.util.*;
public class Solution4 
{

    public static String checkPangrams(String[] pangram) 
    {
        StringBuilder result = new StringBuilder();

        for (String str : pangram) 
        {
            boolean[] letterPresent = new boolean[26];
            int count = 0;

            for (char c : str.toCharArray()) 
            {
                if (c >= 'a' && c <= 'z') 
                {
                    int index = c - 'a';
                    if (!letterPresent[index]) 
                    {
                        letterPresent[index] = true;
                        count++;
                    }
                }
            }

            if (count == 26) 
            {
                result.append("1");
            } 
            else 
            {
                result.append("0");
            }
        }

        return result.toString();
    }
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.println("Enter the number of strings");
        int n=Integer.parseInt(br.readLine());
        System.out.println("Enter a list of strings:");
        String[] pangram = new String[n];
        for(int i=0;i<n;i++)
        {
            System.out.println("Enter string "+(i+1));
            pangram[i]=br.readLine();
        }
        String result = checkPangrams(pangram);
        System.out.println(result);
    }
}

5.
class Solution5 {
    public int minInsertions(String s) {
        Stack<Character> stack=new Stack<>();
        int count=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                stack.push(s.charAt(i));
            }else{
                if(i+1<s.length()&& s.charAt(i+1)==')'){
                    
                    i++;
                }else count++;
                
                if(!stack.isEmpty()){
                    stack.pop();
                }else count++ ;
            }
        }
        count+=2*stack.size();
        return count;
    }
}

6.

import java.util.*;
import java.io.*;
public class Solution6 
{
   
    public static int minimumSumDifference(int[] securityValues, String msg) 
    {
        char[] charArray = msg.toCharArray();
        int n = charArray.length;

        CharacterSecurity[] charSecurities = new CharacterSecurity[n];
        for (int i = 0; i < n; i++) 
        {
            char c = charArray[i];
            int securityValue = securityValues[c - 'a'];
            charSecurities[i] = new CharacterSecurity(c, securityValue);
        }

        Arrays.sort(charSecurities);

        int minSum = 0;
        for (int i = 0; i < n - 1; i++) 
        {
            int diff = Math.abs(charSecurities[i].securityValue - charSecurities[i + 1].securityValue);
            minSum += diff;
        }

        return minSum;
    }

    static class CharacterSecurity implements Comparable<CharacterSecurity>
    {
        char character;
        int securityValue;

        public CharacterSecurity(char character, int securityValue) 
        {
            this.character = character;
            this.securityValue = securityValue;
        }

        @Override
        public int compareTo(CharacterSecurity other) 
        {
            return Integer.compare(this.securityValue, other.securityValue);
        }
    }
 public static void main(String[] args)throws IOException 
    {
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.println("enter the string:");
        int[] securityValues = {1, 2, 1, 3, 1, 3, 5, 7, 1, 1, 5, 5, 8, 10, 11, 1, 23, 2, 3, 7, 8, 9, 1, 6, 5, 9};
        String msg = br.readLine();
        int minSum = minimumSumDifference(securityValues, msg);
        System.out.println(minSum);
    }
}

7.

import java.util.*;
import java.io.*;
public class Solution7 
{

    public static int countNonRepeatingSubstrings(String s) 
    {
        int n = s.length();
        Set<Character> window = new HashSet<>();
        int count = 0;
        int left = 0;
        int right = 0;

        while (right < n) 
        {
            char c = s.charAt(right);
            if (!window.contains(c)) 
            {
                window.add(c);
                count += right - left + 1;
                right++;
            } 
            else 
            {
                window.remove(s.charAt(left));
                left++;
            }
        }

        return count;
    }
    public static void main(String[] args)throws IOException
    {
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.println("enter the string:");
        String s = br.readLine();
        int count = countNonRepeatingSubstrings(s);
        System.out.println(count);
    }
}


8.

class Solution8 {
    static int countSubstrings(String S) {
        int len = S.length(), ans = 0;
        for (int i = 0; i < len; i++) {
            int j = i - 1, k = i;
            while (k < len - 1 && S.charAt(k) == S.charAt(k+1)) k++;
            ans += (k - j) * (k - j + 1) / 2;
            i = k++;
            while (j >= 0 && k < len && S.charAt(k++) == S.charAt(j--)) ans++;
        }
        return ans;
    }
    public static void main(String args[])
    {
        String str="tacocat";
        System.out.println(countSubstrings(str));
    }
}


9.

public class Solution9
 {
   
    static void compressedString(String str) {
        int n = str.length();
        for (int i = 0; i < n; i++) {
            int count = 1;
            while (i < n - 1 && str.charAt(i) == str.charAt(i + 1)) {
                count++;
                i++;
            }
    
            if (count == 1) {
                System.out.print(str.charAt(i));
            } else {
                System.out.print(str.charAt(i));
                System.out.print(count);
            }
        }
    }
    
    public static void main(String[] args) {
        String str = "abaasass";
        compressedString(str);
    }
    }

10.

import java.util.*;
import java.io.*;
public class Solution10 
{

    public static String findNextPermutation(String word) 
    {
        char[] charArray = word.toCharArray();
        int n = charArray.length;

        // Find the largest index k such that charArray[k] < charArray[k+1]
        int k = n - 2;
        while (k >= 0 && charArray[k] >= charArray[k + 1]) 
        {
            k--;
        }

        if (k < 0) 
        {
            // The word is already the last permutation, so return "no answer"
            return "no answer";
        }

        // Find the largest index l such that charArray[l] > charArray[k]
        int l = n - 1;
        while (l > k && charArray[l] <= charArray[k]) 
        {
            l--;
        }

        // Swap charArray[k] and charArray[l]
        char temp = charArray[k];
        charArray[k] = charArray[l];
        charArray[l] = temp;

        // Reverse the suffix starting from k+1
        reverse(charArray, k + 1, n - 1);

        return new String(charArray);
    }

    public static void reverse(char[] arr, int start, int end) 
    {
        while (start < end) 
        {
            char temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    public static void main(String[] args)throws IOException
    {
        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
        System.out.println("enter the word:");
        String word = br.readLine();
        String nextPermutation = findNextPermutation(word);
        System.out.println(nextPermutation);
    }
}







