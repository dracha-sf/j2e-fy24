------------------------------------------------------------------------------------------------------------------------------------------
program-1
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null){
            return true;
        }
        if(p==null || q==null){
            return false;
        }
        if(p.val==q.val){
            return isSameTree(p.left,q.left) && isSameTree(p.right,q.right)?true:false;
        }
        return false;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-2
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        return isMirror(root,root);
    }
    public boolean isMirror(TreeNode root1,TreeNode root2){
        if(root1==null && root2==null)return true;
        if(root1==null || root2==null)return false;
        if(root1 .val == root2.val){
            boolean ileft=isMirror(root1.left,root2.right);
            boolean iright=isMirror(root1.right,root2.left);
            if(ileft && iright){
                return true;
            }
        }
        return false;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-3
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return null;
        }
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-4
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        if(Math.abs(Height(root.left)-Height(root.right))>1){
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
    public int  Height(TreeNode root){
        if(root == null){
            return 0;
        }
        return Math.max(Height(root.left),Height(root.right))+1;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-5
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1 == null)return root2;
        if(root2 == null)return root1;
        root1.val += root2.val;
        root1.left = mergeTrees(root1.left,root2.left);
        root1.right = mergeTrees(root1.right,root2.right);
        return root1;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-6
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
  public boolean isValidBST(TreeNode root) {
  return bst(root,Long.MAX_VALUE,Long.MIN_VALUE);
  }
  public boolean bst(TreeNode root,long maxval,long minval){
    if(root == null)return true;
    if(root.val>=maxval || root.val<=minval){
      return false;
    }
    return bst(root.left,root.val,minval) && bst(root.right,maxval,root.val);
  }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-7
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        ArrayList<Integer> list = new ArrayList<>();
        inorder(root,list);
        return list.get(k-1);
    }
    public void inorder(TreeNode root,ArrayList<Integer> list){
        if(root == null){
            return;
        }
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-8
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return createBst(nums,0,nums.length-1);
    }
    public TreeNode createBst(int[] nums,int l,int r){
        if(l>r){
            return null;
        }
        int mid=(l+r)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = createBst(nums,l,mid-1);
        root.right = createBst(nums,mid+1,r);
        return root;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
program-9
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root == null)return null;
        if(root.val>val){
            return searchBST(root.left,val);
        }
        else if(root.val == val){
            return root;
        }
        else{
            return searchBST(root.right,val);
        }
    }
}