1.
public class Solution1 {

    static void printAllKLength(char[] set, int k)
    {
        int n = set.length;
        printAllKLengthRec(set, "", n, k);
    }


    static void printAllKLengthRec(char[] set,
                                String prefix,
                                int n, int k)
    {


        if (k == 0)
        {
            System.out.println(prefix);
            return;
        }


        for (int i = 0; i < n; ++i)
        {


            String newPrefix = prefix + set[i];


            printAllKLengthRec(set, newPrefix,
                                    n, k - 1);
        }
    }

    public static void main(String[] args)
    {
        System.out.println("First Test");
        char[] set1 = {'a', 'b'};
        int k = 3;
        printAllKLength(set1, k);

        System.out.println("\nSecond Test");
        char[] set2 = {'a', 'b', 'c', 'd'};
        k = 1;
        printAllKLength(set2, k);
    }

}

2.
class Solution2 {
private:
    int m, n;

    int helper(int i, int j, vector<vector<bool>> &visited, vector<vector<int>> &dp)
    {
        if(i<0 || i>=m || j<0 || j>=n || visited[i][j]) return 0;
        if(i==0 || j==0) return dp[i][j] = 1;
        
        if(dp[i][j] != -1) return dp[i][j];
  
        visited[i][j] = true;
        int paths = helper(i-1, j, visited, dp) + helper(i, j-1, visited, dp);
        visited[i][j] = false;
        
        return dp[i][j] = paths;
    }

public:
    int uniquePaths(int m, int n)
    {
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        this->m = m;
        this->n = n;

        helper(m-1, n-1, visited, dp);

        return dp[m-1][n-1];
    }
};

3.
class Solution3 {
public:
    void reorderList(ListNode* head) {
        vector<ListNode*> v;
        ListNode* temp = head;
        while(temp != NULL){
            v.push_back(temp);
            temp = temp->next;
        };
        int i=0, j=v.size()-1;
        head = v[i];
        head->next = v[j];
        i++;
        temp = head->next;
        while(j>i)  {
            temp->next = v[i];
            temp = temp->next;
            j--;
            temp->next = v[j];
            temp = temp->next;
            i++;
        }
        temp->next=NULL;
    }
};

4.
import java.io.*;
import java.math.*;
import java.util.*;
public class Solution4 {
	static void towerOfHanoi(int n, char from_rod,
							char to_rod, char aux_rod)
	{
		if (n == 0) {
			return;
		}
		towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
		System.out.println("Move disk " + n + " from rod "
						+ from_rod + " to rod "
						+ to_rod);
		towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
	}


	public static void main(String args[])
	{
		int N = 3;


		towerOfHanoi(N, 'A', 'C', 'B');
	}
}

5.
class Solution5 {
public:
    
    unordered_map<int, vector<TreeNode *>> memo;
    
    vector<TreeNode *> allPossibleFBT(int n) {
      
        vector<TreeNode *> ans;
       
        if (n < 1 || n % 2 == 0) {
            
            return ans;
        }
        if (memo.find(n) != memo.end()) {
           
            return memo[n];
        }
        if (n == 1) {
            
            ans.push_back(new TreeNode(0));
            memo[1] = ans;
            return ans;
        }


        
        for (int i = 1; i < n; i += 2) {
            
            vector<TreeNode *> left = allPossibleFBT(i);
            vector<TreeNode *> right = allPossibleFBT(n - 1 - i);

         
            for (int j = 0; j < left.size(); j++) {
                for (int k = 0; k < right.size(); k++) {
                    TreeNode *root = new TreeNode(0);
                    root->left = left[j];
                    root->right = right[k];
                    ans.push_back(root);
                }
            }
        }
        memo[n] = ans;  
        return ans;
    }
};

6.
import java.io.*;

public class Solution6 {


	static void subsetSums(int[] arr, int l, int r, int sum)
	{


		if (l > r) {
			System.out.print(sum + " ");
			return;
		}


		subsetSums(arr, l + 1, r, sum + arr[l]);


		subsetSums(arr, l + 1, r, sum);
	}


	public static void main(String[] args)
	{
		int[] arr = { 5, 4, 3 };
		int n = arr.length;

		subsetSums(arr, 0, n - 1, 0);
	}



}

7.
public class Solution7 {


	static int max(int a, int b) { return (a > b) ? a : b; }


	static int knapSack(int W, int wt[], int val[], int n)
	{

		if (n == 0 || W == 0)
			return 0;


		if (wt[n - 1] > W)
			return knapSack(W, wt, val, n - 1);


		else
			return max(val[n - 1]
						+ knapSack(W - wt[n - 1], wt,
									val, n - 1),
					knapSack(W, wt, val, n - 1));
	}


	public static void main(String args[])
	{
		int profit[] = new int[] { 60, 100, 120 };
		int weight[] = new int[] { 10, 20, 30 };
		int W = 50;
		int n = profit.length;
		System.out.println(knapSack(W, weight, profit, n));
	}



}

8.
class Solution8 {
public:
    bool checkPalindrome(string str, int startIndex, int lastIndex){
        while(startIndex <= lastIndex){
            if(str[startIndex] != str[lastIndex])
                return false;
            startIndex++;
            lastIndex--;
        }
        return true;
    }
    void palindromePartition(int index, vector<string>& ds, vector<vector<string>>& output, string str){
        if(index == str.length()){
            output.push_back(ds);
            return;
        }
        for(int i = index; i < str.length(); i++){
            if(checkPalindrome(str, index, i)){
                ds.push_back(str.substr(index, i - index + 1));
                palindromePartition(i+1, ds, output, str);
                ds.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> output;
        vector<string> ds;
        palindromePartition(0, ds, output, s);
        return output;
    }
};